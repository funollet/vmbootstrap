#!/bin/bash
# vmbootstrap
#
# Creates and installs a new instance of a virtual machine in the (localhost)
# node. Configures the VM to the point of being usable with ssh.
#
# Largely inspired by:
#   - http://dsa.debian.org/howto/install-kvm/
#   - 'newvserver' on 'vserver-utils' Debian package
#
# TODO:
# - Grub files are copied from /usr/lib/grub/x86_64-pc/ (hardcoded).
# - mount/umount all partitions in guest's /etc/fstab.
#
#
#
# Copyright 2009 Jordi Funollet <jordi.f@ati.es>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

############################################################

function set_defaults {

    # Collect information needed to calculate default values.
    net_tmp=($(ifconfig br0))
    gw_tmp=($(ip route list scope global))
    tmp_dns_search=$(grep search /etc/resolv.conf)
    tmp_dns_nameservers=$(grep nameserver /etc/resolv.conf)

    ############################################################
    # Default values. Can be overwritten in a config file.
    #
    #
    # / partition size (in libvirt format).
    root_size='20G'
    # /boot partition size (in libvirt format).
    boot_size='128M'
    # swap partition size (in libvirt format).
    swap_size='1G'
    # Interface source name for libvirt.
    interface='eth0'
    # Memory for new host (in libvirt format).
    libvirt_mem='1048576'
    # Virtual CPUs for new host (in libvirt format).
    libvirt_vcpu='1'
    # New host architecture (in libvirt format).
    libvirt_arch='x86_64' 
    # Name of Debian release to be installed by debootstrap.
    debian_release=$(lsb_release -sc)
    # URL of Debian mirror used by debootstrap.
    debian_mirror=$(apt-cache policy grub \
    	| awk '/'$(lsb_release -sc)'\/main/ {print $2"/debian/"}')
    # Kernel package to be installed.
    kernelpkg='linux-image-2.6-amd64'
    # Network mask for /etc/network/interfaces.
    netmask=${net_tmp[8]/Mask:/}
    # Broadcast address for /etc/network/interfaces.
    broadcast=${net_tmp[7]/Bcast:/}
    # Gateway address for /etc/network/interfaces.
    gateway=${gw_tmp[2]}
    # dns-search for /etc/network/interfaces.
    dns_search=${tmp_dns_search//search /}
    # dns-nameservers for /etc/network/interfaces.
    dns_nameservers=${tmp_dns_nameservers//nameserver /}
    # Domain of the new host, for /etc/hosts.
    domain=$(hostname -d)
    #
    #
    ############################################################

    # This list is used by function echo_defaults().
    key_defaults_list="root_size boot_size interface libvirt_mem
    	libvirt_vcpu libvirt_arch debian_release debian_mirror \
    	kernelpkg netmask broadcast gateway dns_search dns_nameservers \
    	domain"

}


echo_defaults () {
    # Shows default configuration values in 'key=value' format.
    # 
    # Environment:
    #
    #   keys_defaults_list: string with names of vars to be shown.

    echo "### Default values: "
    for key in ${key_defaults_list} ; do
    	echo ${key}=${!key}
    done
}


function error () {
    # Warn and exit.
    echo "[`basename $0`] error: $*" ; exit 1 ;
}

function check_execs () {
    # Verifies we can execute received files.
 
    for X in $@ ; do
        # Is it in $PATH?
        hash $X > /dev/null 2>&1 || error "$X not in PATH"
        FULLPATH=`hash -t $X`
        # If it's executable, jump to next file.
        [ -x $FULLPATH ] && continue
        # Is it a symbolic link...?
        [ ! -L $FULLPATH ] || error "$X non-executable"
        # ... and the referenced file is executable? (Ugly hack).
        stat -Lc '%A' $FULLPATH | grep 'x' || error "$X non-executable"
    done
}

############################################################

usage () {
    echo "Usage: $(basename $0) [options] <VG-name> <guest-name>"
    echo "    -h,--help     Show this message and exit."
    echo "    -i,--ip=IP    Provide an IP address for the virtual server."
    echo "    --mount       Just mount guest's partitions."
    echo "    --umount      Just umount guest's partitions."
    echo "    --remove      Remove a guest's definition and the storage it was using."
    echo "    --grub        Just install Grub."
    echo "    -s,--show-defaults  Show default values."
    echo 
    echo "Reads non-default values from ~/.$(basename $0)"
}


parse_opts () {
    tempopt=$(getopt --name $(basename $0) -o u,h,i:,s -l usage,help,ip:,mount,umount,remove,grub,show-defaults -- "$@")
    # Finish if received some unknown option.
    if [ $? != 0 ] ; then usage && exit 1 ; fi

    eval set -- "$tempopt"

    # Default values for command-line options.
    just_mount='no'
    just_umount='no'
    remove='no'
    just_grub='no'
    ip_addr=''
    show_defaults='no'
    # Parse named options.
    while true ; do
        case "$1" in
            -u|--usage|-h|--help) usage && exit ;;
            -i|--ip) ip_addr=$2 ; shift 2 ;;
            --mount) just_mount='yes' ; shift ;;
            --umount) just_umount='yes' ; shift ;;
            --remove) remove='yes' ; shift ;;
            --grub) just_grub='yes' ; shift ;;
            -s|--show-defaults) show_defaults='yes' ; shift ;;
	    --) shift ; break ;;
	    *) echo "Internal error!" >&2 ; exit 1 ;;
    	esac
    done

    # Parse arguments.
    if [ $# -ne 2 ] ; then usage && exit 1 ; fi
    vgname=$1
    guest=$2
}



############################################################

make_guest_fs () {
    # Create LV.
    virsh vol-create-as ${vgname} ${guest}-boot ${boot_size}
    virsh vol-create-as ${vgname} ${guest}-root ${root_size}
    virsh vol-create-as ${vgname} ${guest}-swap ${swap_size}

    # One partition, bootable.
    echo ',,L,*' | sfdisk ${boot_dev}

    # Expose the partitions inside guest's /boot.
    if [ ! -b "${boot_dev}1" ] ; then
       kpartx -a ${boot_dev}
       # This symlink is not required but makes later commands easier.
       ln -s /dev/mapper/${vgname}-${guest}--boot1 ${boot_dev}1
    fi

    # Create filesystems.
    mkfs.ext3 ${root_dev}
    mkfs.ext3 "${boot_dev}1"
    mkswap ${swap_dev}
}


mount_guest () {

    # Expose guest's /boot partition.
    if [ ! -b "${boot_dev}1" ] ; then
       kpartx -a ${boot_dev}
       # This symlink is not required but makes later commands easier.
       ln -s /dev/mapper/${vgname}-${guest}--boot1 ${boot_dev}1
    fi

    # Mount guest's filesystems.
    mkdir -p ${target}
    if ! mountpoint -q ${target} ; then
        mount ${root_dev} ${target}
    fi
    mkdir -p ${target}/boot/
    if ! mountpoint -q ${target}/boot/ ; then
        mount "${boot_dev}1" ${target}/boot/
    fi

    # We need FS UUIDs for configuring Grub and /etc/fstab.
    root_uuid=$(vol_id --uuid ${root_dev})
    boot_uuid=$(vol_id --uuid "${boot_dev}1")
    swap_uuid=$(vol_id --uuid ${swap_dev})
}


umount_guest () {
    umount ${target}/boot/ &&
    umount ${target} &&
    rmdir ${target}
    rm ${boot_dev}1
    kpartx -d ${boot_dev}
}

############################################################

do_debootstrap () {
    debootstrap --components=main,non-free,contrib \
        --keyring=/usr/share/keyrings/debian-archive-keyring.gpg \
        --include=ssh,grub,udev,locales \
        ${debian_release} ${target} ${debian_mirror}
}


############################################################

template_grub_menu_lst () {
    cat <<.

title Debian 'bootstrap' config
root (hd0,0)
kernel /vmlinuz root=UUID=${root_uuid} ro console=tty0 console=ttyS0,115200
initrd /initrd.img

### END DEBIAN AUTOMAGIC KERNELS LIST
.
}

conf_grub () {
    # 'grub-install' and 'update-grub' are prone to fail on a chroot
    # (can't find why). Just run 'grub' until we can boot the system and
    # later do a 'update-grub'.
    
    mkdir -p ${target}/boot/grub/

    # Get the first part from the KVM host.
    lastline=$(grep -ns 'End Default Options' /boot/grub/menu.lst | cut -d: -f1)
    head -n ${lastline} /boot/grub/menu.lst > ${target}/boot/grub/menu.lst
    # Customize configuration.
    # Serial console for Grub.
    sed -i -r -e \
        "/^### BEGIN AUTOMAGIC KERNELS/i\
serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1\
\nterminal --timeout=5 serial console\n" \
        ${target}/boot/grub/menu.lst
    # Change root partition; console for boot.
    sed -i -r -e \
        "s|^(# kopt=root=).* (.*)$|\
\1UUID=${root_uuid} \2 console=tty0 console=ttyS0,115200|" \
        ${target}/boot/grub/menu.lst

    # Minimal Grub config for booting.
    # Run 'update-grub' after first boot and will be regenerated.
    template_grub_menu_lst >> ${target}/boot/grub/menu.lst

    # Put Grub on the MBR.
    cp -a ${target}/usr/lib/grub/x86_64-pc/* ${target}/boot/grub/
}

template_grub () {
    cat <<.
device (hd0) ${boot_dev}
root (hd0,0)
setup (hd0)
quit
.
}

run_grub () {
    template_grub | grub --device-map=/dev/null 
}


############################################################
## Install a kernel. Doing this with 'debootstrap' asks for questions,
## so it pauses the installation.

template_kernelconf_pre () {
    cat <<.
do_symlinks = yes
link_in_boot = yes
do_initrd = yes
.
}

template_kernelconf_post () {
    cat <<.
postinst_hook = /usr/sbin/update-grub
postrm_hook   = /usr/sbin/update-grub
do_bootloader = no
.
}

conf_kernel () {

    # Suitable config for first time kernel install.
    template_kernelconf_pre > ${target}/etc/kernel-img.conf

    # Install the image. Mounting /proc avoids warnings about /proc/modules.
    # Fail to umount /proc and you can't umount the chroot dir.
    # Safe way: don't mount /proc, ignore warnings.
    chroot ${target} /usr/bin/aptitude -y install ${kernelpkg}

    # Complete the kernel install config. We don't want this here
    # on the first run.
    template_kernelconf_post >> ${target}/etc/kernel-img.conf
}

############################################################

template_console_preseed () {
    cat <<.
console-common  console-data/keymap/family      select  qwerty
console-data    console-data/keymap/family      select  qwerty
console-common  console-data/keymap/powerpcadb  boolean
console-data    console-data/keymap/powerpcadb  boolean
console-common  console-data/keymap/policy      select  Don't touch keymap
console-data    console-data/keymap/policy      select  Don't touch keymap
console-common  console-data/bootmap-md5sum     string  none
console-data    console-data/bootmap-md5sum     string  none
console-common  console-data/keymap/ignored     note
console-data    console-data/keymap/ignored     note
.
}

conf_basics () {
    apt-key exportall | chroot ${target} /usr/bin/apt-key add -
    chroot ${target} /usr/bin/aptitude update
    
    if [ -f /etc/timezone ]; then
        tz=$(cat /etc/timezone)
        zonefile="${target}/usr/share/zoneinfo/$tz"
        if [ -f "$zonefile" ]; then
            echo "$tz" > ${target}/etc/timezone
            cp "$zonefile" "${target}/etc/localtime"
        fi
    fi
    
    cp /etc/locale.gen ${target}/etc/
    cp /etc/default/locale ${target}/etc/default/
    chroot ${target} /usr/sbin/locale-gen
    chroot ${target} /usr/sbin/update-locale
    # Copy the default keymap.
    mkdir ${target}/etc/console/
    cp /etc/console/boottime.kmap.gz ${target}/etc/console/boottime.kmap.gz
    template_console_preseed > ${target}/tmp/console.pressed
    chroot ${target} /usr/bin/debconf-set-selections /tmp/console.pressed
    chroot ${target} /usr/bin/aptitude -y install console-tools
    #chroot ${target} /usr/sbin/install-keymap es
}


############################################################
## Configure the new guest network.

template_etc_hosts () {
    cat <<.
127.0.0.1   localhost
$ip_addr    ${guest}.${domain}  ${guest}

# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
.
}

template_network_interfaces () {
    cat <<.
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
allow-hotplug ${interface}
iface ${interface} inet static
        address ${ip_addr}
        netmask ${netmask}
        broadcast ${broadcast}
        gateway ${gateway}
        # dns-* options are implemented by the resolvconf package, if installed
        dns-nameservers ${dns_nameservers}
        dns-search ${dns_search}
.
    
}


conf_network () {
    # udev (running in a chroot) creates a config for the devices of the
    # main host, not the fresh installed one.
    > ${target}/etc/udev/rules.d/70-persistent-net.rules

    echo "${guest}" > ${target}/etc/hostname
    template_etc_hosts > ${target}/etc/hosts
    cp /etc/resolv.conf ${target}/etc/
    template_network_interfaces > ${target}/etc/network/interfaces
    # Copy authorized keys from host.
    mkdir ${target}/root/.ssh/
    cp /root/.ssh/authorized_keys ${target}/root/.ssh/
}


############################################################
## Define a KVM guest using libvirt.

template_libvirt_xml () {
    cat <<.
<domain type='kvm'>                                         
  <name>${guest}</name>                                      
  <uuid>${libvirt_uuid}</uuid>         
  <memory>${libvirt_mem}</memory>                                  
  <currentMemory>${libvirt_mem}</currentMemory>                    
  <vcpu>${libvirt_vcpu}</vcpu>                                            
  <os>                                                      
    <type arch='${libvirt_arch}' machine='pc'>hvm</type>
    <boot dev='hd'/>                                        
  </os>                                                     
  <features>                                                
    <acpi/>                                                 
    <apic/>                                                 
    <pae/>                                                  
  </features>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <devices>
    <emulator>/usr/bin/kvm</emulator>
    <disk type='block' device='disk'>
      <source dev='${boot_dev}'/>
      <target dev='vda' bus='virtio'/>
    </disk>
    <disk type='block' device='disk'>
      <source dev='${root_dev}'/>
      <target dev='vdb' bus='virtio'/>
    </disk>
    <disk type='block' device='disk'>
      <source dev='${swap_dev}'/>
      <target dev='vdc' bus='virtio'/>
    </disk>
    <interface type='bridge'>
      <mac address='${libvirt_mac}'/>
      <source bridge='br0'/>
      <model type='virtio'/>
    </interface>
    <serial type='pty'>
      <target port='0'/>
    </serial>
    <console type='pty'>
      <target port='0'/>
    </console>
    <input type='mouse' bus='ps2'/>
    <graphics type='vnc' port='-1' autoport='yes' listen='127.0.0.1'/>
  </devices>
</domain>
.
}


conf_libvirt () {
    libvirt_mac=$(echo -n de:ad:be:ef ; for i in 1 2 ; do echo -n $(echo ":$RANDOM$RANDOM" | cut -c -3) ;done)
    libvirt_uuid=$(uuidgen)
    virsh define <(template_libvirt_xml)
    virsh autostart ${guest}
}



__vol_delete () {
    # Delete a volume in a pool, if exists.
    # 
    #   $1: pool
    #   $2: volume
    virsh vol-info --pool $1 $2 > /dev/null 2>&1 &&
        virsh vol-delete --pool $1 $2
}

remove_guest() {
    # Undefine a guest and free the storage it was using.
    virsh undefine $guest
    __vol_delete $vgname ${guest}-swap
    __vol_delete $vgname ${guest}-boot
    __vol_delete $vgname ${guest}-root
}

############################################################

template_fstab () {
    cat <<.
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
proc            /proc           proc    defaults        0 0
UUID=${root_uuid}   /               ext3  errors=remount-ro   0 1
UUID=${boot_uuid}   /boot           ext3  defaults            0 2
UUID=${swap_uuid}   none        swap    sw           0 0
.
}


template_inittab () {
    cat <<.
# KVM console.
T0:12345:respawn:/sbin/getty -L ttyS0 115200 vt100
.
}

############################################################

parse_opts "$@"

# Verify all the tools are installed on the system.
check_execs ip ifconfig grep cut awk sed lsb_release apt-cache hostname \
    getopt virsh debootstrap sfdisk kpartx mkfs.ext3 mount umount \
    mountpoint vol_id grub chroot apt-key aptitude debconf-set-selections

set_defaults

if [ "${show_defaults}" = "yes" ] ; then
	echo_defaults ; exit
else
	# Load config file for overwriting default values.
	[ -f ~/.$(basename $0) ] && . ~/.$(basename $0)
fi

# Set explicitly the URI for virsh.
export VIRSH_DEFAULT_CONNECT_URI='qemu:///system'

# chroot mountpoint for /
target="/mnt/${guest}"
# LV for the / disk.
root_dev="/dev/${vgname}/${guest}-root"
# LV for the /boot disk.
boot_dev="/dev/${vgname}/${guest}-boot"
# LV for swap.
swap_dev="/dev/${vgname}/${guest}-swap"


if [ "$remove" = "yes" ] ; then
    remove_guest ; exit
fi
if [ "$just_mount" = "yes" ] ; then
    mount_guest ; exit
fi
if [ "$just_umount" = "yes" ] ; then
    umount_guest ; exit
fi
if [ "$just_grub" = "yes" ] ; then
    mount_guest
    run_grub
    umount_guest
    exit
fi

if [ -z "$ip_addr" ] ; then
    echo "Please provide an IP address."
    exit 1
fi

make_guest_fs
mount_guest
conf_libvirt
do_debootstrap
conf_basics
conf_kernel
conf_grub
run_grub
template_inittab >> ${target}/etc/inittab  # Adds a serial console.
template_fstab > ${target}/etc/fstab
conf_network
umount_guest

cat <<.
Some tasks are left to the sysadmin after first boot.
  * Run 'update-grub' to generate an standard Grub menu.lst, the
    existing one is just enought for first boot.
  * Change root password!
.
