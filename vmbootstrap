#!/bin/bash
# vmbootstrap
#
# Creates and installs a new instance of a virtual machine in the (localhost)
# node. Configures the VM to the point of being usable with ssh.
#
# Only KVM is supported for virtualization. Easy to extend, the script
# uses libvirt.
#
# Only Debian guests can be installed.
#
#
# Largely inspired by:
#   - http://dsa.debian.org/howto/install-kvm/
#   - 'newvserver' on 'vserver-utils' Debian package
#
# Required packages:
#   kvm libvirt-bin bridge-utils
#   debootstrap multipath-tools sfdisk uuid-runtime
#
# Assumptions:
#   - Host node is running Debian.
#   - No LVM inside the guest.
#   - Two LV will be created for every guest:
#       - 'guest-boot' for /boot, partitioned so can install Grub on MBR (/dev/vda1)
#       - 'guest-root' for /, not partitioned, easy to grow (/dev/vdb)
#
#TODO:
# - Better comments of the default assumptions about storage and network.
# - Overwrite default values sourcing an external file config.
# - template_libvirt_xml() doesn't assigns a domain-id. Should we?
#   Or is it done when we define the domain?
# - /boot is not created inside the guest (why not???)
# - The KVM host and disks could be mostly defined with libvirt, simplifiying
#   the XML template and, probably, the LVM commands.
#       attach-interface attach-disk attach-device
#       virsh # vol-create-as ${vgname} ${guest}-boot 128M
# - Echo pending actions for the sysadmin or generate an script to be run
#   after the first boot:
#     - mount point /boot does not exists
#     - update-grub
#     - Configure keyboard/locale (dpkg-reconfigure console-data)
#     - Change root password.


# Copyright 2009 Jordi Funollet <jordi.f@ati.es>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

############################################################
# Default values. Customize as needed.
root_size='20g'
boot_size='128m'
kernelpkg='linux-image-2.6-amd64'
interface='eth0'

# Defaults taken from KVM host.
debian_release=$(lsb_release -c)
# Quick and dirty way of knowing the Debian mirror used on the KVM host.
debian_mirror=$(apt-cache policy grub | awk '/lenny\/main/ {print $2"/debian/"}')

# Defaults taken from KVM host.
net_tmp=($(ifconfig br0))
gw_tmp=($(ip route list scope global))
netmask=${net_tmp[8]/Mask:/}
broadcast=${net_tmp[7]/Bcast:/}
#network=   # Do we need it?
gateway=${gw_tmp[2]}
unset net_tmp
unset gw_tmp
domain=$(grep search /etc/resolv.conf | cut -d' ' -f2-)
nameservers=$(grep nameserver /etc/resolv.conf | cut -d' ' -f2-)



############################################################

usage () {
    echo "Usage: $(basename $0) [options] <VG-name> <kvm-guest>"
    echo "    -h,--help     Show this message and exit."
    echo "    -i,--ip=IP    Provide an IP address for the virtual server."
    echo "    --mount       Just mount guest's partitions."
    echo "    --umount      Just umount guest's partitions."
    echo "    --grub        Just install Grub."
}


parse_opts () {
    tempopt=$(getopt --name kvmbootstrap -o u,h,i -l usage,help,ip:,mount,umount,grub -- "$@")
    # Finish if received some unknown option.
    if [ $? != 0 ] ; then usage && exit 1 ; fi

    eval set -- "$tempopt"

    # Default values
    just_mount='no'
    just_umount='no'
    just_grub='no'
    ip_addr=''
    # Parse named options.
    while true ; do
        case "$1" in
            -u|--usage|-h|--help) usage && exit ;;
            -i|--ip) ip_addr=$2 ; shift 2 ;;
            --mount) just_mount='yes' ; shift ;;
            --umount) just_umount='yes' ; shift ;;
            --grub) just_grub='yes' ; shift ;;
	    --) shift ; break ;;
	    *) echo "Internal error!" >&2 ; exit 1 ;;
    	esac
    done

    # Parse arguments.
    if [ $# -ne 2 ] ; then usage && exit 1 ; fi
    vgname=$1
    guest=$2
}


############################################################

make_guest_fs () {
    # Create LV.
    lvcreate -L ${root_size} -n "${guest}" /dev/${vgname}
    lvcreate -L ${boot_size} -n "${guest}-boot" /dev/${vgname}

    # One partition, bootable.
    echo ',,L,*' | sfdisk ${boot_dev}

    # Expose the partitions inside guest's /boot.
    if [ ! -b "${boot_dev}1" ] ; then
       kpartx -a ${boot_dev}
       # This symlink is not required but makes later commands easier.
       ln -s /dev/mapper/${vgname}-${guest}--boot1 ${boot_dev}1
    fi

    # Create filesystems.
    mkfs.ext3 ${root_dev}
    mkfs.ext3 "${boot_dev}1"
}


mount_guest () {

    # Expose guest's /boot partition.
    if [ ! -b "${boot_dev}1" ] ; then
       kpartx -a ${boot_dev}
       # This symlink is not required but makes later commands easier.
       ln -s /dev/mapper/${vgname}-${guest}--boot1 ${boot_dev}1
    fi

    # Mount guest's filesystems.
    mkdir -p ${target}
    if ! mountpoint -q ${target} ; then
        mount ${root_dev} ${target}
    fi
    chroot ${target} mkdir -p /boot
    if ! mountpoint -q ${target}/boot/ ; then
        mount "${boot_dev}1" ${target}/boot/
    fi

    # We need FS UUIDs for configuring Grub and /etc/fstab.
    root_uuid=$(vol_id --uuid ${root_dev})
    boot_uuid=$(vol_id --uuid "${boot_dev}1")
}


umount_guest () {
    umount ${target}/boot/ &&
    rmdir  ${target}/boot/ &&
    umount ${target} &&
    rmdir ${target} &&
    rm ${boot_dev}1 &&
    kpartx -d ${boot_dev}
}

############################################################

do_debootstrap () {
    debootstrap --components=main,non-free,contrib \
        --include=ssh,grub,udev,locales \
        $debian_release ${target} $debian_mirror
}


############################################################

template_grub_menu_lst () {
    cat <<.

title Debian 'bootstrap' config
root (hd0,0)
kernel /vmlinuz root=UUID=${root_uuid} ro
initrd /initrd.img

### END DEBIAN AUTOMAGIC KERNELS LIST
.
}

template_grub () {
    cat <<.
device (hd0) ${boot_dev}
root (hd0,0)
setup (hd0)
quit
.
}

conf_grub () {
    # 'grub-install' and 'update-grub' are prone to fail on a chroot
    # (can't find why). Just run 'grub' until we can boot the system and
    # later do a 'update-grub'.
    
    mkdir -p ${target}/boot/grub/

    # Get the first part from the KVM host.
    lastline=$(grep -ns 'End Default Options' /boot/grub/menu.lst | cut -d: -f1)
    head -n ${lastline} /boot/grub/menu.lst > ${target}/boot/grub/menu.lst
    # Customize configuration.
    sed -i -r -e \
        "s|^(# kopt=root=).* (.*)$|\1UUID=${root_uuid} \2 console=tty0 console=ttyS0,115200|" \
        ${target}/boot/grub/menu.lst
    # Probably we should do more changes to the original file, but for now
    # it just works.

    # Minimal Grub config for booting.
    # Run update-grub after first boot and will be regenerated.
    template_grub_menu_lst >> ${target}/boot/grub/menu.lst

    # Put Grub on the MBR.
    cp -a ${target}/usr/lib/grub/x86_64-pc/* ${target}/boot/grub/
    template_grub | grub --device-map=/dev/null 
}


############################################################
## Install a kernel. Doing this with 'debootstrap' asks for questions,
## so it pauses the installation.

template_kernelconf_pre () {
    cat <<.
do_symlinks = yes
link_in_boot = yes
do_initrd = yes
.
}

template_kernelconf_post () {
    cat <<.
postinst_hook = /usr/sbin/update-grub
postrm_hook   = /usr/sbin/update-grub
do_bootloader = no
.
}

conf_kernel () {

    # Suitable config for first time kernel install.
    template_kernelconf_pre > ${target}/etc/kernel-img.conf

    # Install the image. Mounting /proc avoids warnings about /proc/modules.
    # Fail to umount /proc and you can't umount the chroot dir.
    # Safe way: don't mount /proc, ignore warnings.
    chroot ${target} aptitude -y install $kernelpkg

    # Complete the kernel install config. We don't want this here
    # on the first run.
    template_kernelconf_post >> ${target}/etc/kernel-img.conf
}

############################################################

conf_basics () {
    apt-key exportall | chroot ${target} apt-key add -
    chroot ${target} aptitude update
    
    if [ -f /etc/timezone ]; then
        tz=$(cat /etc/timezone)
        zonefile="${target}/usr/share/zoneinfo/$tz"
        if [ -f "$zonefile" ]; then
            echo "$tz" > ${target}/etc/timezone
            cp "$zonefile" "${target}/etc/localtime"
        fi
    fi
    
    cp /etc/locale.gen ${target}/etc/
    cp /etc/default/locale ${target}/etc/default/
    chroot ${target} /usr/sbin/locale-gen
    chroot ${target} /usr/sbin/update-locale
    # Copy the default keymap.
    cp /etc/console/boottime.kmap.gz ${target}/etc/console/boottime.kmap.gz
    chroot ${target} aptitude -y install console-tools
    #chroot ${target} /usr/sbin/install-keymap es
}


############################################################
## Configure the new guest network.

template_etc_hosts () {
    cat <<.
127.0.0.1   localhost
$ip_addr    ${guest}  ${guest}.${domain}

# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
.
}

template_network_interfaces () {
    cat <<.
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
allow-hotplug ${interface}
iface ${interface} inet static
        address $ip_addr
        netmask $netmask
        network $network
        broadcast $broadcast
        gateway $gateway
        # dns-* options are implemented by the resolvconf package, if installed
        dns-nameservers $nameservers
        dns-search $domain
.
    
}


conf_network () {
    # udev (running in a chroot) creates a config for the devices of the
    # main host, not the fresh installed one.
    rm /etc/udev/rules.d/70-persistent-net.rules

    echo "${guest}" > ${target}/etc/hostname
    template_etc_hosts > ${target}/etc/hosts
    cp /etc/resolv.conf ${target}/etc/
    template_network_interfaces > ${target}/etc/network/interfaces
    # Copy authorized keys from host.
    mkdir ${target}/root/.ssh/
    cp /root/.ssh/authorized_keys ${target}/root/.ssh/
}


############################################################
## Define a KVM guest using libvirt.

template_libvirt_xml () {
    libvirt_mem='1048576'
    libvirt_vcpu='1'
    libvirt_arch='x86_64' 
    
    cat <<.
<domain type='kvm'>                                         
  <name>${guest}</name>                                      
  <uuid>${libvirt_uuid}</uuid>         
  <memory>${libvirt_mem}</memory>                                  
  <currentMemory>${libvirt_mem}</currentMemory>                    
  <vcpu>${libvirt_vcpu}</vcpu>                                            
  <os>                                                      
    <type arch=${libvirt_arch} machine='pc'>hvm</type>
    <boot dev='hd'/>                                        
  </os>                                                     
  <features>                                                
    <acpi/>                                                 
    <apic/>                                                 
    <pae/>                                                  
  </features>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <devices>
    <emulator>/usr/bin/kvm</emulator>
    <disk type='file' device='cdrom'>
      <target dev='hdc' bus='ide'/>
      <readonly/>
    </disk>
    <disk type='block' device='disk'>
      <source dev='${boot_dev}'/>
      <target dev='vda' bus='virtio'/>
    </disk>
    <disk type='block' device='disk'>
      <source dev='${root_dev}'/>
      <target dev='vdb' bus='virtio'/>
    </disk>
    <interface type='bridge'>
      <mac address='${libvirt_mac}'/>
      <source bridge='br0'/>
      <model type='virtio'/>
    </interface>
    <serial type='pty'>
      <target port='0'/>
    </serial>
    <console type='pty'>
      <target port='0'/>
    </console>
    <input type='mouse' bus='ps2'/>
    <graphics type='vnc' port='-1' autoport='yes' listen='127.0.0.1'/>
  </devices>
</domain>
.
}


conf_libvirt () {
    libvirt_mac=$(echo -n de:ad:be:ef ; for i in 1 2 ; do echo -n $(echo ":$RANDOM$RANDOM" | cut -c -3) ;done)
    libvirt_uuid=$(uuidgen)
    virsh define <(template_libvirt_xml)
    virsh autostart ${guest}
}

############################################################

template_fstab () {
    cat <<.
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
proc            /proc           proc    defaults        0 0
UUID=${root_uuid}   /               ext3  errors=remount-ro   0 1
UUID=${boot_uuid}   /boot           ext3  defaults            0 2
.
}


template_inittab () {
    cat <<.
# KVM console.
T0:12345:respawn:/sbin/getty -L ttyS0 115200 vt100
.
}

############################################################



parse_opts "$@"

target="/mnt/${guest}"
root_dev="/dev/${vgname}/${guest}-root"
boot_dev="/dev/${vgname}/${guest}-boot"


if [ "$just_mount" = "yes" ] ; then
    mount_guest ; exit
fi
if [ "$just_umount" = "yes" ] ; then
    umount_guest ; exit
fi
if [ "$just_grub" = "yes" ] ; then
    mount_guest
    conf_grub
    umount_guest
    exit
fi

if [ -z "$ip_addr" ] ; then
    echo "Please provide an IP address."
    exit 1
fi


make_guest_fs
mount_guest
do_debootstrap
conf_kernel
conf_grub
template_inittab >> ${target}/etc/inittab
template_fstab > ${target}/etc/fstab
conf_network
conf_basics
umount_guest
conf_libvirt
